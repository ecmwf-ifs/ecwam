#! (C) Copyright 2022- ECMWF.
#!
#! This software is licensed under the terms of the Apache Licence Version 2.0
#! which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
#! In applying this licence, ECMWF does not waive the privileges and immunities
#! granted to it by virtue of its status as an intergovernmental organisation
#! nor does it submit to any jurisdiction.
#!
#!
#:mute
#:set f = io.open(os.path.dirname(_THIS_FILE_)+'/yowdrvtype_config.yml')
#:set ymlstring = f.read()
#:set input = ecwam_yaml_reader.yaml.safe_load(ymlstring)
#:set objtypes = input['objtypes']
#:set type2field_sp = {'real': 'RB', 'int': 'IM', 'ocean': 'RM'}
#:set type2field_dp = {'real': 'RB', 'int': 'IM', 'ocean': 'RD'}
#:set type2dtype = {'real': 'REAL(KIND=JWRB)', 'int': 'INTEGER(KIND=JWIM)', 'ocean': 'REAL(KIND=JWRO)'}
$:f.close()
#:endmute
#!
#!
#:set obj = str(TYPE_NAME)
#:set _def = objtypes[obj]
MODULE ${obj.upper()}$_TYPE_MOD

   USE PARKIND_WAVE, ONLY : JWRB, JWIM, JWRO
   USE FIELD_MODULE, ONLY : FIELD_3RB, FIELD_2IM, FIELD_2RB, FIELD_3IM, FIELD_4RB, FIELD_4IM, FIELD_2RD, &
   &                        FIELD_2RM, FIELD_1IM, FIELD_1RB
   USE FIELD_FACTORY_MODULE, ONLY : FIELD_NEW, FIELD_DELETE
   IMPLICIT NONE

   PRIVATE

   TYPE ${obj.upper()}$
   #:set rank = _def['rank']
   #:for type, vars in zip(_def['types'], _def['vars'])
       #:for var in vars
            #:set field = '      CLASS(FIELD_' + str(rank) + type2field_dp[type] + '), POINTER :: F_' + var.upper() +  ' => NULL()'
            #:set ptr = f'      {type2dtype[type]}, POINTER, CONTIGUOUS :: ' + var.upper() + '(' + ','.join(':' * rank) + ') => NULL()'
#ifndef PARKIND1_SINGLE_NEMO
            $:field
            $:ptr
#endif
            #:set field = '      CLASS(FIELD_' + str(rank) + type2field_sp[type] + '), POINTER :: F_' + var.upper() +  ' => NULL()'
            #:set ptr = f'      {type2dtype[type]}, POINTER, CONTIGUOUS :: ' + var.upper() + '(' + ','.join(':' * rank) + ') => NULL()'
#ifdef PARKIND1_SINGLE_NEMO
            $:field
            $:ptr
#endif
       #:endfor
   #:endfor
      LOGICAL :: LALLOC = .FALSE.
   CONTAINS
      PROCEDURE :: ALLOC => ${obj.upper()}$_ALLOC
      PROCEDURE :: DEALLOC => ${obj.upper()}$_DEALLOC
#:if defined('WAM_GPU')
      PROCEDURE :: SYNC_DEVICE_RDWR => ${obj.upper()}$_SYNC_DEVICE_RDWR
      PROCEDURE :: SYNC_DEVICE_RDONLY => ${obj.upper()}$_SYNC_DEVICE_RDONLY
      PROCEDURE :: SYNC_HOST_RDWR => ${obj.upper()}$_SYNC_HOST_RDWR
      PROCEDURE :: SYNC_HOST_RDONLY => ${obj.upper()}$_SYNC_HOST_RDONLY
      PROCEDURE :: GET_DEVICE_DATA_RDWR => ${obj.upper()}$_GET_DEVICE_DATA_RDWR
      PROCEDURE :: GET_DEVICE_DATA_RDONLY => ${obj.upper()}$_GET_DEVICE_DATA_RDONLY
      PROCEDURE :: GET_HOST_DATA_RDWR => ${obj.upper()}$_GET_HOST_DATA_RDWR
      PROCEDURE :: GET_HOST_DATA_RDONLY => ${obj.upper()}$_GET_HOST_DATA_RDONLY
      PROCEDURE :: DELETE_DEVICE_DATA => ${obj.upper()}$_DELETE_DEVICE_DATA
#:endif
   END TYPE ${obj.upper()}$

   PUBLIC :: ${obj.upper()}$

   CONTAINS

   SUBROUTINE ${obj.upper()}$_ALLOC(SELF, UBOUNDS, LBOUNDS)
      #:set rank = _def['rank']
      CLASS(${obj.upper()}$) :: SELF
      INTEGER(KIND=JWIM), INTENT(IN) :: UBOUNDS(${rank}$)
      INTEGER(KIND=JWIM), INTENT(IN), OPTIONAL :: LBOUNDS(${rank}$)
      INTEGER(KIND=JWIM) :: LLBOUNDS(${rank}$)

      LLBOUNDS(:) = 1
      IF(PRESENT(LBOUNDS)) LLBOUNDS = LBOUNDS

      #:for _, vars in zip(_def['types'], _def['vars'])
          #:for var in vars
      CALL FIELD_NEW(SELF%F_${var.upper()}$, LBOUNDS=LLBOUNDS, UBOUNDS=UBOUNDS, PERSISTENT=.TRUE.)
      CALL SELF%F_${var.upper()}$%GET_HOST_DATA_RDWR(SELF%${var.upper()}$)
          #:endfor
      #:endfor

      SELF%LALLOC = .TRUE.
      !$acc enter data copyin(SELF)

   END SUBROUTINE ${obj.upper()}$_ALLOC

   SUBROUTINE ${obj.upper()}$_DEALLOC(SELF)
      CLASS(${obj.upper()}$) :: SELF

      #:for _, vars in zip(_def['types'], _def['vars'])
          #:for var in vars
      NULLIFY(SELF%${var.upper()}$)
      !$acc exit data detach(SELF%${var.upper()}$)
      CALL FIELD_DELETE(SELF%F_${var.upper()}$)
      NULLIFY(SELF%F_${var.upper()}$)
          #:endfor
      #:endfor

      SELF%LALLOC = .FALSE.
      !$acc exit data delete(SELF)

   END SUBROUTINE ${obj.upper()}$_DEALLOC

#:if defined('WAM_GPU')
   SUBROUTINE ${obj.upper()}$_GET_DEVICE_DATA_RDWR(SELF, ${', '.join(var.upper() for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$)
      CLASS(${obj.upper()}$) :: SELF
      #:for _, vars in zip(_def['types'], _def['vars'])
          #:for var in vars
            #:set flag = '      LOGICAL, INTENT(IN), OPTIONAL :: ' + var.upper()
            $:flag
            #:set flag = '      LOGICAL :: ' + f'L_{var.upper()} = .FALSE.'
            $:flag
          #:endfor
      #:endfor

     #:for _, vars in zip(_def['types'], _def['vars'])
         #:for var in vars
     IF(PRESENT(${var.upper()}$)) L_${var.upper()}$ = ${var.upper()}$
         #:endfor
     #:endfor


      IF(${'.OR.'.join(f'L_{var.upper()}' for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$)THEN
         !... copy only selected members
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         IF(${f'L_{var.upper()}'}$)THEN
             CALL SELF%F_${var.upper()}$%GET_DEVICE_DATA_RDWR(SELF%${var.upper()}$)
             !$acc enter data attach(SELF%${var.upper()}$)
         ENDIF
             #:endfor
         #:endfor
      ELSE
         !... copy entire struct
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         CALL SELF%F_${var.upper()}$%GET_DEVICE_DATA_RDWR(SELF%${var.upper()}$)
         !$acc enter data attach(SELF%${var.upper()}$)
             #:endfor
         #:endfor
      ENDIF

   END SUBROUTINE ${obj.upper()}$_GET_DEVICE_DATA_RDWR

   SUBROUTINE ${obj.upper()}$_GET_DEVICE_DATA_RDONLY(SELF, ${', '.join(var.upper() for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$)
      CLASS(${obj.upper()}$) :: SELF
      #:for _, vars in zip(_def['types'], _def['vars'])
          #:for var in vars
            #:set flag = '      LOGICAL, INTENT(IN), OPTIONAL :: ' + var.upper()
            $:flag
            #:set flag = '      LOGICAL :: ' + f'L_{var.upper()} = .FALSE.'
            $:flag
          #:endfor
      #:endfor

     #:for _, vars in zip(_def['types'], _def['vars'])
         #:for var in vars
     IF(PRESENT(${var.upper()}$)) L_${var.upper()}$ = ${var.upper()}$
         #:endfor
     #:endfor


      IF(${'.OR.'.join(f'L_{var.upper()}' for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$)THEN
         !... copy only selected members
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         IF(${f'L_{var.upper()}'}$)THEN
             CALL SELF%F_${var.upper()}$%GET_DEVICE_DATA_RDONLY(SELF%${var.upper()}$)
             !$acc enter data attach(SELF%${var.upper()}$)
         ENDIF
             #:endfor
         #:endfor
      ELSE
         !... copy entire struct
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         CALL SELF%F_${var.upper()}$%GET_DEVICE_DATA_RDONLY(SELF%${var.upper()}$)
         !$acc enter data attach(SELF%${var.upper()}$)
             #:endfor
         #:endfor
      ENDIF

   END SUBROUTINE ${obj.upper()}$_GET_DEVICE_DATA_RDONLY

   SUBROUTINE ${obj.upper()}$_SYNC_DEVICE_RDWR(SELF, ${', '.join(var.upper() for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$, QUEUE)
      CLASS(${obj.upper()}$) :: SELF
      #:for _, vars in zip(_def['types'], _def['vars'])
          #:for var in vars
            #:set flag = '      LOGICAL, INTENT(IN), OPTIONAL :: ' + var.upper()
            $:flag
            #:set flag = '      LOGICAL :: ' + f'L_{var.upper()} = .FALSE.'
            $:flag
          #:endfor
      #:endfor
      INTEGER(KIND=JWIM), INTENT(IN), OPTIONAL :: QUEUE

     #:for _, vars in zip(_def['types'], _def['vars'])
         #:for var in vars
     IF(PRESENT(${var.upper()}$)) L_${var.upper()}$ = ${var.upper()}$
         #:endfor
     #:endfor


      IF(${'.OR.'.join(f'L_{var.upper()}' for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$)THEN
         !... copy only selected members
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         IF(${f'L_{var.upper()}'}$)THEN
             CALL SELF%F_${var.upper()}$%SYNC_DEVICE_RDWR(QUEUE=QUEUE)
         ENDIF
             #:endfor
         #:endfor
      ELSE
         !... copy entire struct
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         CALL SELF%F_${var.upper()}$%SYNC_DEVICE_RDWR(QUEUE=QUEUE)
             #:endfor
         #:endfor
      ENDIF

   END SUBROUTINE ${obj.upper()}$_SYNC_DEVICE_RDWR

   SUBROUTINE ${obj.upper()}$_SYNC_DEVICE_RDONLY(SELF, ${', '.join(var.upper() for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$, QUEUE)
      CLASS(${obj.upper()}$) :: SELF
      #:for _, vars in zip(_def['types'], _def['vars'])
          #:for var in vars
            #:set flag = '      LOGICAL, INTENT(IN), OPTIONAL :: ' + var.upper()
            $:flag
            #:set flag = '      LOGICAL :: ' + f'L_{var.upper()} = .FALSE.'
            $:flag
          #:endfor
      #:endfor
      INTEGER(KIND=JWIM), INTENT(IN), OPTIONAL :: QUEUE

     #:for _, vars in zip(_def['types'], _def['vars'])
         #:for var in vars
     IF(PRESENT(${var.upper()}$)) L_${var.upper()}$ = ${var.upper()}$
         #:endfor
     #:endfor


      IF(${'.OR.'.join(f'L_{var.upper()}' for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$)THEN
         !... copy only selected members
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         IF(${f'L_{var.upper()}'}$)THEN
             CALL SELF%F_${var.upper()}$%SYNC_DEVICE_RDONLY(QUEUE=QUEUE)
         ENDIF
             #:endfor
         #:endfor
      ELSE
         !... copy entire struct
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         CALL SELF%F_${var.upper()}$%SYNC_DEVICE_RDONLY(QUEUE=QUEUE)
             #:endfor
         #:endfor
      ENDIF

   END SUBROUTINE ${obj.upper()}$_SYNC_DEVICE_RDONLY

   SUBROUTINE ${obj.upper()}$_GET_HOST_DATA_RDONLY(SELF, ${', '.join(var.upper() for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$)
      CLASS(${obj.upper()}$) :: SELF
      #:for _, vars in zip(_def['types'], _def['vars'])
          #:for var in vars
            #:set flag = '      LOGICAL, INTENT(IN), OPTIONAL :: ' + var.upper()
            $:flag
            #:set flag = '      LOGICAL :: ' + f'L_{var.upper()} = .FALSE.'
            $:flag
          #:endfor
      #:endfor

     #:for _, vars in zip(_def['types'], _def['vars'])
         #:for var in vars
     IF(PRESENT(${var.upper()}$)) L_${var.upper()}$ = ${var.upper()}$
         #:endfor
     #:endfor


      IF(${'.OR.'.join(f'L_{var.upper()}' for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$)THEN
         !... copy only selected members
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         IF(${f'L_{var.upper()}'}$)THEN
             !$acc exit data detach(SELF%${var.upper()}$)
             CALL SELF%F_${var.upper()}$%GET_HOST_DATA_RDONLY(SELF%${var.upper()}$)
         ENDIF
             #:endfor
         #:endfor
      ELSE
         !... copy entire struct
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         !$acc exit data detach(SELF%${var.upper()}$)
         CALL SELF%F_${var.upper()}$%GET_HOST_DATA_RDONLY(SELF%${var.upper()}$)
             #:endfor
         #:endfor
      ENDIF

   END SUBROUTINE ${obj.upper()}$_GET_HOST_DATA_RDONLY

   SUBROUTINE ${obj.upper()}$_GET_HOST_DATA_RDWR(SELF, ${', '.join(var.upper() for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$)
      CLASS(${obj.upper()}$) :: SELF
      #:for _, vars in zip(_def['types'], _def['vars'])
          #:for var in vars
            #:set flag = '      LOGICAL, INTENT(IN), OPTIONAL :: ' + var.upper()
            $:flag
            #:set flag = '      LOGICAL :: ' + f'L_{var.upper()} = .FALSE.'
            $:flag
          #:endfor
      #:endfor

     #:for _, vars in zip(_def['types'], _def['vars'])
         #:for var in vars
     IF(PRESENT(${var.upper()}$)) L_${var.upper()}$ = ${var.upper()}$
         #:endfor
     #:endfor

      IF(${'.OR.'.join(f'L_{var.upper()}' for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$)THEN
         !... copy only selected members
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         IF(${f'L_{var.upper()}'}$)THEN
             !$acc exit data detach(SELF%${var.upper()}$)
             CALL SELF%F_${var.upper()}$%GET_HOST_DATA_RDWR(SELF%${var.upper()}$)
         ENDIF
             #:endfor
         #:endfor
      ELSE
         !... copy entire struct
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         !$acc exit data detach(SELF%${var.upper()}$)
         CALL SELF%F_${var.upper()}$%GET_HOST_DATA_RDWR(SELF%${var.upper()}$)
             #:endfor
         #:endfor
      ENDIF

   END SUBROUTINE ${obj.upper()}$_GET_HOST_DATA_RDWR

   SUBROUTINE ${obj.upper()}$_SYNC_HOST_RDONLY(SELF, ${', '.join(var.upper() for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$, QUEUE)
      CLASS(${obj.upper()}$) :: SELF
      #:for _, vars in zip(_def['types'], _def['vars'])
          #:for var in vars
            #:set flag = '      LOGICAL, INTENT(IN), OPTIONAL :: ' + var.upper()
            $:flag
            #:set flag = '      LOGICAL :: ' + f'L_{var.upper()} = .FALSE.'
            $:flag
          #:endfor
      #:endfor
      INTEGER(KIND=JWIM), INTENT(IN), OPTIONAL :: QUEUE

     #:for _, vars in zip(_def['types'], _def['vars'])
         #:for var in vars
     IF(PRESENT(${var.upper()}$)) L_${var.upper()}$ = ${var.upper()}$
         #:endfor
     #:endfor


      IF(${'.OR.'.join(f'L_{var.upper()}' for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$)THEN
         !... copy only selected members
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         IF(${f'L_{var.upper()}'}$)THEN
             CALL SELF%F_${var.upper()}$%SYNC_HOST_RDONLY(QUEUE=QUEUE)
         ENDIF
             #:endfor
         #:endfor
      ELSE
         !... copy entire struct
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         CALL SELF%F_${var.upper()}$%SYNC_HOST_RDONLY(QUEUE=QUEUE)
             #:endfor
         #:endfor
      ENDIF

   END SUBROUTINE ${obj.upper()}$_SYNC_HOST_RDONLY

   SUBROUTINE ${obj.upper()}$_SYNC_HOST_RDWR(SELF, ${', '.join(var.upper() for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$, QUEUE)
      CLASS(${obj.upper()}$) :: SELF
      #:for _, vars in zip(_def['types'], _def['vars'])
          #:for var in vars
            #:set flag = '      LOGICAL, INTENT(IN), OPTIONAL :: ' + var.upper()
            $:flag
            #:set flag = '      LOGICAL :: ' + f'L_{var.upper()} = .FALSE.'
            $:flag
          #:endfor
      #:endfor
      INTEGER(KIND=JWIM), INTENT(IN), OPTIONAL :: QUEUE

     #:for _, vars in zip(_def['types'], _def['vars'])
         #:for var in vars
     IF(PRESENT(${var.upper()}$)) L_${var.upper()}$ = ${var.upper()}$
         #:endfor
     #:endfor


      IF(${'.OR.'.join(f'L_{var.upper()}' for _, vars in zip(_def['types'], _def['vars']) for var in vars)}$)THEN
         !... copy only selected members
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         IF(${f'L_{var.upper()}'}$)THEN
             CALL SELF%F_${var.upper()}$%SYNC_HOST_RDWR(QUEUE=QUEUE)
         ENDIF
             #:endfor
         #:endfor
      ELSE
         !... copy entire struct
         #:for _, vars in zip(_def['types'], _def['vars'])
             #:for var in vars
         CALL SELF%F_${var.upper()}$%SYNC_HOST_RDWR(QUEUE=QUEUE)
             #:endfor
         #:endfor
      ENDIF

   END SUBROUTINE ${obj.upper()}$_SYNC_HOST_RDWR

   SUBROUTINE ${obj.upper()}$_DELETE_DEVICE_DATA(SELF)
      CLASS(${obj.upper()}$) :: SELF

      #:for _, vars in zip(_def['types'], _def['vars'])
          #:for var in vars
      CALL SELF%F_${var.upper()}$%DELETE_DEVICE_DATA()
          #:endfor
      #:endfor

   END SUBROUTINE ${obj.upper()}$_DELETE_DEVICE_DATA
#:endif

END MODULE ${obj.upper()}$_TYPE_MOD
